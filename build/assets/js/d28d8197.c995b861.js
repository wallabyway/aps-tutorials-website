"use strict";(self.webpackChunkaps_tutorials_website=self.webpackChunkaps_tutorials_website||[]).push([[503],{4137:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(n),m=s,f=d["".concat(l,".").concat(m)]||d[m]||p[m]||o;return n?r.createElement(f,a(a({ref:t},u),{},{components:n})):r.createElement(f,a({ref:t},u))}));function m(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=n.length,a=new Array(o);a[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:s,a[1]=i;for(var c=2;c<o;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2141:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>p});var r=n(7462),s=(n(7294),n(4137));const o={toc:[]};function a(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,r.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"First, let's include the Account Admin SDK, add the ",(0,s.kt)("inlineCode",{parentName:"p"},"@aps_sdk/account-admin")," library, and also create an instance of\nSDK client of ",(0,s.kt)("inlineCode",{parentName:"p"},"AdminClient")," at the beginning of ",(0,s.kt)("inlineCode",{parentName:"p"},"services/aps.js")," file:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="services/aps.js"',title:'"services/aps.js"'},"const { SdkManagerBuilder } = require('@aps_sdk/autodesk-sdkmanager');\nconst { AuthenticationClient, Scopes, ResponseType } = require('@aps_sdk/authentication');\nconst { DataManagementClient } = require('@aps_sdk/data-management');\n// highlight-start\nconst { AdminClient, Platform  } = require('@aps_sdk/account-admin');\n// highlight-end\nconst { APS_CLIENT_ID, APS_CLIENT_SECRET, APS_CALLBACK_URL } = require('../config.js');\n\nconst service = module.exports = {};\n\nconst sdk = SdkManagerBuilder.Create().build();\nconst authenticationClient = new AuthenticationClient(sdk);\nconst dataManagementClient = new DataManagementClient(sdk);\n// highlight-start\nconst adminClient = new AdminClient(sdk);\n// highlight-end\n")),(0,s.kt)("p",null,"Now append the following code to the end of the ",(0,s.kt)("inlineCode",{parentName:"p"},"services/aps.js")," file to support export & import projects and users:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="services/aps.js"',title:'"services/aps.js"'},'// ACC Admin APIs\nservice.getProjectsACC = async (accountId, token) => {\n    let allProjects = [];\n    let offset = 0;\n    let totalResults = 0;\n    do {\n        const resp = await adminClient.getProjectsAsync(token, accountId, null, null, null, null, null, null, null, null, null, null, null, null, null, null, offset);\n        allProjects = allProjects.concat(resp.results);\n        offset += resp.pagination.limit;\n        totalResults = resp.pagination.totalResults;\n    } while (offset < totalResults)\n    return allProjects;\n};\n\nservice.createProjectACC = async (accountId, projectInfo, token) =>{\n    const resp = await adminClient.createProjectAsync( token, accountId, projectInfo );\n    return resp;\n}\n\nservice.getProjectACC = async (projectId, token) => {\n    let projectsList = [];\n    const resp = await adminClient.getProjectAsync( token, projectId );\n    projectsList.push(resp);\n    return projectsList;\n};\n\nservice.getProjectUsersACC = async (projectId, token) => {\n    let allUsers = [];\n    let offset = 0;\n    let totalResults = 0;\n    do{\n        const resp = await adminClient.getProjectUsersAsync( token, projectId, null, null, null, null, null, null, null, null, null, null,null,null,null,null,null,null,null,offset );\n        allUsers = allUsers.concat(resp.results);\n        offset += resp.pagination.limit;\n        totalResults = resp.pagination.totalResults;\n    }while (offset < totalResults) \n    return allUsers;\n};\n\nservice.addProjectAdminACC = async (projectId, email, token) => {\n    const userBody = {\n        "email": email,\n        "products": [{\n            "key": "projectAdministration",\n            "access": "administrator"\n        }, {\n            "key": "docs",\n            "access": "administrator"\n        }]\n    }\n    const resp = await adminClient.assignProjectUserAsync( token, projectId, userBody );\n    return resp;\n}\n\nservice.importProjectUsersACC = async (projectId, projectUsers, token) => {\n    const resp = await adminClient.importProjectUsersAsync( token, projectId, projectUsers )\n    return resp;\n}\n')))}a.isMDXComponent=!0;const i={},l="Account Admin",c={unversionedId:"tutorials/acc-admin/admin",id:"tutorials/acc-admin/admin",title:"Account Admin",description:"Now, it's time to implement our server to support Account Admin access, in this step, we'll",source:"@site/docs/03-tutorials/05-acc-admin/04-admin.mdx",sourceDirName:"03-tutorials/05-acc-admin",slug:"/tutorials/acc-admin/admin",permalink:"/tutorials/acc-admin/admin",draft:!1,editUrl:"https://github.com/autodesk-platform-services/aps-tutorials-website/edit/master/docs/03-tutorials/05-acc-admin/04-admin.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Project Browsing",permalink:"/tutorials/acc-admin/data"},next:{title:"UI Framework",permalink:"/tutorials/acc-admin/ui"}},u={},p=[{value:"Projects &amp; Users",id:"projects--users",level:2},{value:"Server endpoints",id:"server-endpoints",level:2},{value:"Try it out",id:"try-it-out",level:2}],d={toc:p};function m(e){let{components:t,...o}=e;return(0,s.kt)("wrapper",(0,r.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"account-admin"},"Account Admin"),(0,s.kt)("p",null,"Now, it's time to implement our server to support Account Admin access, in this step, we'll\ncontinue extend our server based on ",(0,s.kt)("a",{parentName:"p",href:"https://aps.autodesk.com/en/docs/acc/v1/overview/field-guide/admin/"},"Account Admin APIs"),"\nto FETCH and CREATE the data of ACC Projects and Users:"),(0,s.kt)("h2",{id:"projects--users"},"Projects & Users"),(0,s.kt)("p",null,"First, let's add a couple of helper methods for getting and importing projects and users:"),(0,s.kt)(a,{mdxType:"NodeJsVsCodeHubs"}),(0,s.kt)("h2",{id:"server-endpoints"},"Server endpoints"),(0,s.kt)("p",null,"Next, let's expose the new functionality to the client-side code through another\nset of endpoints."),(0,s.kt)(a,{mdxType:"NodeJsVsCodeHubs"}),(0,s.kt)("h2",{id:"try-it-out"},"Try it out"),(0,s.kt)("p",null,"And that's it for the server side. Time to try it out!"),(0,s.kt)("p",null,"Start (or restart) the app from Visual Studio Code as usual, "),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Use the ID of one ACC hub as you get in previous step in the address: http://localhost:8080/api/admin/projects?accountId={your-hub-id}.\nIn this case the server application should respond with a JSON list of all projects\navailable under the specified hub."),(0,s.kt)("li",{parentName:"ul"},"Use the project ID as you get in previous step, try to call the address:\nhttp://localhost:8080/api/admin/project/users?projectId={your-project-id}, the server application should\nrespond with a JSON list of all the users from this project. ")),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"You may get different project list by the 2 differnt endpoints, here are the explain:"),(0,s.kt)("ul",{parentName:"admonition"},(0,s.kt)("li",{parentName:"ul"},"With Data Management API, it will return all the projects that the current user is involved."),(0,s.kt)("li",{parentName:"ul"},"With Account Admin API, it will return all the projects in the account if the current user is Account Admin."))),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Account Admin Response",src:n(3037).Z,width:"1921",height:"1054"})))}m.isMDXComponent=!0},3037:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/account-admin-ad482cceb50c48905b5b8d6902ef303c.webp"}}]);