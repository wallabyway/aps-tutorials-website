"use strict";(self.webpackChunkaps_tutorials_website=self.webpackChunkaps_tutorials_website||[]).push([[70],{4137:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,h=u["".concat(s,".").concat(m)]||u[m]||p[m]||i;return n?a.createElement(h,o(o({ref:t},d),{},{components:n})):a.createElement(h,o({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5306:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=n(7462),r=(n(7294),n(4137));const i={},o="Table",l={unversionedId:"tutorials/acc-admin/table",id:"tutorials/acc-admin/table",title:"Table",description:"Finally, we're ready to implement all the remaining logic of the class Table.",source:"@site/docs/03-tutorials/05-acc-admin/06-table.mdx",sourceDirName:"03-tutorials/05-acc-admin",slug:"/tutorials/acc-admin/table",permalink:"/tutorials/acc-admin/table",draft:!1,editUrl:"https://github.com/autodesk-platform-services/aps-tutorials-website/edit/master/docs/03-tutorials/05-acc-admin/06-table.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"UI Framework",permalink:"/tutorials/acc-admin/ui"},next:{title:"Learn More",permalink:"/learn-more/"}},s={},c=[{value:"Table",id:"table-1",level:2},{value:"Load Table Data",id:"load-table-data",level:2},{value:"CSV File Prepare",id:"csv-file-prepare",level:2},{value:"Try it out",id:"try-it-out",level:2}],d={toc:c};function p(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"table"},"Table"),(0,r.kt)("p",null,"Finally, we're ready to implement all the remaining logic of the class ",(0,r.kt)("inlineCode",{parentName:"p"},"Table"),".\nThe class ",(0,r.kt)("inlineCode",{parentName:"p"},"Table")," is responsible to handle different type of data, including project list,\nuser list, and provide the functions including:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Get the data list from ACC Admin App based on the current input information."),(0,r.kt)("li",{parentName:"ul"},"Draw the current data list into a bootstrap table."),(0,r.kt)("li",{parentName:"ul"},"Export the current data list into a csv file."),(0,r.kt)("li",{parentName:"ul"},"Import the data from a csv file into the ACC Admin.")),(0,r.kt)("h2",{id:"table-1"},"Table"),(0,r.kt)("p",null,"Let's start by implementing the Table functionality.\nOpen ",(0,r.kt)("inlineCode",{parentName:"p"},"table.js")," file under the ",(0,r.kt)("inlineCode",{parentName:"p"},"wwwroot")," subfolder, add the implementation code into Class ",(0,r.kt)("inlineCode",{parentName:"p"},"Table"),":\nHere are the explanation of the main function:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"resetData"),": Fetch and setup the data based on the input accountId, projectId, and tabKey. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"drawTable"),": Draw the bootstrap table with the current data. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"exportToCSV"),": Export the current data into CSV file."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"importFromCSV"),": Import the information into ACC Admin system from the prepared CSV file.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="wwwroot/table.js"',title:'"wwwroot/table.js"'},"//////////////////////////////////////////////////////////////////////////////////////////////////////////\n//Table class wraps the specific data info\nclass Table {\n    #tableId;\n    #accountId;\n    #projectId;\n    #tabKey;\n    #dataSet;\n\n    constructor(tableId, accountId = null, projectId = null, tabKey = 'PROJECTS') {\n        this.#tableId = tableId;\n        this.#accountId = accountId;\n        this.#projectId = projectId;\n        this.#tabKey = tabKey;\n        this.#dataSet = null;\n    };\n\n    get tabKey(){\n        return this.#tabKey;\n    }\n\n    set tabKey( tabKey){\n        this.#tabKey = tabKey;\n    }\n\n// highlight-start\n    resetData = async( tabKey=null, accountId=null, projectId=null ) =>{\n        this.#tabKey = tabKey? tabKey: this.#tabKey;\n        this.#accountId = accountId? accountId: this.#accountId;\n        this.#projectId = accountId||projectId? projectId: this.#projectId;\n        const url = TABLE_TABS[this.#tabKey].REQUEST_URL;\n        const data = {\n            'accountId': this.#accountId,\n            'projectId': this.#projectId\n        }\n        try {\n            const response = await axios.get(url, { params: data } );\n            this.#dataSet = response.data;\n        } catch (err) {\n            console.error(err);\n            return;\n        }\n        // Mark \"N/A\" for complicated properties.\n        for (var key in this.#dataSet[0]) {\n            if (Array.isArray(this.#dataSet[0][key]) || typeof this.#dataSet[0][key] === 'object' && this.#dataSet[0][key] != null) {\n                this.#dataSet.forEach(item => {\n                    item[key] = \"N/A\";\n                })\n            }\n        }\n    }\n\n    drawTable = () => {\n        if (this.#dataSet == null || this.#dataSet.length == 0) {\n            console.warn('DataSet is not ready, please fetch your data first.');\n            return;\n        }\n\n        let columns = [];\n        for (var key in this.#dataSet[0]) {\n            columns.push({\n                field: key,\n                title: key,\n                align: \"center\"\n            })\n        }\n        $(this.#tableId).bootstrapTable('destroy');\n        $(this.#tableId).bootstrapTable({\n            data: this.#dataSet,\n            customToolbarButtons: [\n                {\n                    name: \"grid-export\",\n                    title: \"Export\",\n                    icon: \"glyphicon-export\",\n                    callback: this.exportToCSV\n                },\n                {\n                    name: \"grid-import\",\n                    title: \"Import\",\n                    icon: \"glyphicon-import\",\n                    callback: this.importFromCSV\n                }\n            ],\n            editable: true,\n            clickToSelect: true,\n            cache: false,\n            showToggle: false,\n            pagination: true,\n            pageList: [5],\n            pageSize: 5,\n            pageNumber: 1,\n            uniqueId: 'id',\n            striped: true,\n            search: true,\n            showRefresh: true,\n            minimumCountColumns: 2,\n            smartDisplay: true,\n            columns: columns\n        });\n    }\n\n    exportToCSV = ()=>{\n        if (this.#dataSet == null || this.#dataSet.length == 0) {\n            console.warn('DataSet is not ready, please fetch your data first.');\n            return;\n        }\n        let csvDataList = [];\n        let csvHeader = [];\n        for (let key in this.#dataSet[0]) {\n            csvHeader.push(key);\n        }\n        csvDataList.push(csvHeader);\n        this.#dataSet.forEach((row) => {\n            let csvRowItem = [];\n            for (let key in row) {\n                if (typeof row[key] === 'string')\n                    csvRowItem.push(\"\\\"\" + row[key].replace(/\\\"/g, \"\\\"\\\"\").replace(\"#\", \"\") + \"\\\"\")\n                else\n                    csvRowItem.push(row[key]);\n            }\n            csvDataList.push(csvRowItem);\n        })\n        let csvString = csvDataList.join(\"%0A\");\n        let a = document.createElement('a');\n        a.href = 'data:attachment/csv,' + csvString;\n        a.target = '_blank';\n        a.download = this.#tabKey + (new Date()).getTime() + '.csv';\n        document.body.appendChild(a);\n        a.click();\n    }\n\n    importFromCSV = async() => {\n        let input = document.createElement('input');\n        input.type = 'file';\n        input.onchange = _ => {\n            let fileUpload = Array.from(input.files);\n            var regex = /^([a-zA-Z0-9\\s_\\\\.\\-:\\(\\)])+(.csv|.txt)$/;\n            if (regex.test(fileUpload[0].name.toLowerCase())) {\n                if (typeof (FileReader) != \"undefined\") {\n                    var reader = new FileReader();\n                    reader.onload = async (e) => {\n                        function sleep(ms = 0) {\n                            return new Promise(resolve => setTimeout(resolve, ms));\n                        }\n                        $(\"#loadingoverlay\").fadeIn()\n                        const rows = e.target.result.split(\"\\r\\n\");\n                        const keys = rows[0].split(',');\n                        let requestDataList = [];\n                        for (let i = 1; i < rows.length; i++) {\n                            let jsonItem = {};\n                            let cells = rows[i].split(\",\");\n                            for (let j = 0; j < cells.length; j++) {\n                                if (cells[j] == null || cells[j] == '')\n                                    continue\n                                // customize the input property\n                                let key = keys[j];\n                                switch (this.#tabKey) {\n                                    case 'PROJECTS':\n                                        if (key == 'template') {\n                                            jsonItem[key] = { 'projectId': cells[j] };\n                                            continue;\n                                        }\n                                        break;\n                                    case 'PROJECT':\n                                    case 'USERS':\n                                        if (key == 'roleIds') {\n                                            const roleIdList = cells[j].replace(/\\s/g, '').split('|');\n                                            jsonItem[key] = roleIdList;\n                                            continue;\n                                        }\n                                        const params = key.split('.')\n                                        const length = params.length;\n                                        if (length == 2 && params[0] == 'products') {\n                                            let productAccess = {\n                                                \"key\": params[length - 1],\n                                                \"access\": cells[j]\n                                            }\n                                            if (jsonItem[\"products\"] == null) {\n                                                jsonItem[\"products\"] = [];\n                                            }\n                                            jsonItem[\"products\"].push(productAccess)\n                                            continue\n                                        }\n                                        break;\n                                    default:\n                                        console.warn(\"The current Admin Data Type is not expected\");\n                                        break;\n                                }\n                                jsonItem[key] = cells[j];\n                            }\n                            requestDataList.push(jsonItem);\n                        }\n                        const data = {\n                            'accountId': this.#accountId,\n                            'projectId': this.#projectId,\n                            'data': requestDataList\n                        }\n                        const url = TABLE_TABS[this.#tabKey].REQUEST_URL;\n                        try {\n                            const resp = await axios.post(url, data);\n                            resp.data.Succeed && resp.data.Succeed.forEach( item => console.log( item + ' is created'));\n                            resp.data.Failed && resp.data.Failed.forEach( item => console.warn( item + ' failed to be created') );\n                            await sleep(3000);\n                            await this.resetData();\n                        } catch (err) {\n                            console.error(err);\n                        }\n                        this.drawTable();\n                        $(\"#loadingoverlay\").fadeOut()\n                    }\n                    reader.readAsText(fileUpload[0]);\n                } else {\n                    alert(\"This browser does not support HTML5.\");\n                }\n            } else {\n                alert(\"Please upload a valid CSV file.\");\n            }\n        };\n        input.click();\n    }    \n// highlight-end\n}\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},'Please note that some complicated properties are just marked as "N/A" to simplify the tutorial,\nand during import, the code will parse the propery information from a CSV file into the request\nbody.')),(0,r.kt)("h2",{id:"load-table-data"},"Load Table Data"),(0,r.kt)("p",null,"Now, let's complete the logic to load the data within the following 2 functions:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"initTableTabs"),(0,r.kt)("li",{parentName:"ul"},"refreshTable")),(0,r.kt)("p",null,"Update the code within the above 2 functions by modifying ",(0,r.kt)("inlineCode",{parentName:"p"},"table.js"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="wwwroot/table.js"',title:'"wwwroot/table.js"'},'export async function refreshTable( accountId = null, projectId=null ) {\n    showTable(false);\n    if( TABLE_TABS[g_accDataTable.tabKey].TAB_CATEGORY==\'hub\' && projectId ){\n        for (let key in TABLE_TABS) {\n            if( TABLE_TABS[key].TAB_CATEGORY == \'hub\' ){\n                $("#" + key).addClass("hidden");\n                $("#" + key).removeClass("active");\n            }\n            else{\n                if( TABLE_TABS[key].CATEGORY_DEFAULT )\n                    $("#" + key).addClass("active");\n                $("#" + key).removeClass("hidden");\n            }\n        } \n    }\n    if (TABLE_TABS[g_accDataTable.tabKey].TAB_CATEGORY == \'project\' && !projectId) {\n        for (let key in TABLE_TABS) {\n            if (TABLE_TABS[key].TAB_CATEGORY == \'hub\') {\n                $("#" + key).removeClass("hidden");\n                if (TABLE_TABS[key].CATEGORY_DEFAULT)\n                    $("#" + key).addClass("active");\n            }\n            else {\n                $("#" + key).addClass("hidden");\n                $("#" + key).removeClass("active");\n            }\n        }\n    }\n    const activeTab = $("ul#adminTableTabs li.active")[0].id;\n// highlight-start\n    try{\n        await g_accDataTable.resetData( activeTab, accountId, projectId );\n        g_accDataTable.drawTable();\n    }catch(err){\n        console.warn(err);\n    }\n// highlight-end\n    $("#loadingoverlay").fadeOut()\n}\n\nexport async function initTableTabs(){\n    // add all tabs\n    for (let key in TABLE_TABS) {\n        $(\'<li id=\' + key + \'><a href="accTable" data-toggle="tab">\' + TABLE_TABS[key].TAB_NAME + \'</a></li>\').appendTo(\'#adminTableTabs\');\n        $("#" + key).addClass((TABLE_TABS[key].CATEGORY_NAME == \'hub\' && TABLE_TABS[key].CATEGORY_DEFAULT) ? "active" : "hidden");\n    } \n    // event on the tabs\n    $(\'a[data-toggle="tab"]\').on(\'shown.bs.tab\', async function (e) {\n        $("#loadingoverlay").fadeIn()\n        const activeTab = e.target.parentElement.id;\n// highlight-start\n        try {\n            await g_accDataTable.resetData(activeTab);\n            g_accDataTable.drawTable();\n        } catch (err) {\n            console.warn(err);\n        }    \n// highlight-end\n        $("#loadingoverlay").fadeOut()\n    });  \n}\n')),(0,r.kt)("h2",{id:"csv-file-prepare"},"CSV File Prepare"),(0,r.kt)("p",null,"Finally, the most important feature is batch import projects/users, this is achieved by using a CSV file,\nwe provided 2 template file for projects and users, you can add your information based on the template,\nthen import these data from csv file into ACC account."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/autodesk-platform-services/aps-acc-admin-tutorial-nodejs/raw/1521d17ea3e44465a228c95bd79c3d2a5b85fe02/template%20files/ProjectsTemplate.csv"},"ProjectsTemplate.csv")," "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/autodesk-platform-services/aps-acc-admin-tutorial-nodejs/raw/1521d17ea3e44465a228c95bd79c3d2a5b85fe02/template%20files/UsersTemplate.csv"},"UsersTemplate.csv")," ")),(0,r.kt)("h2",{id:"try-it-out"},"Try it out"),(0,r.kt)("p",null,"And that's it! Your application is now ready for action. Start it as usual, and when you go to\n",(0,r.kt)("a",{parentName:"p",href:"http://localhost:8080"},"http://localhost:8080"),", you should be presented with a simple UI, with\na tree-view on the left side, you can do the following operation:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Select an ACC Hub: The table will list all the ACC Projects, you can export all the projects to a CSV file by click\nthe ",(0,r.kt)("inlineCode",{parentName:"li"},"Export")," button, or import the prepared projects by a CSV file with Projects information."),(0,r.kt)("li",{parentName:"ul"},"Select an ACC Project: There are 2 tabs, ",(0,r.kt)("inlineCode",{parentName:"li"},"PROJECT")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"USERS"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"PROJECT")," tab will list the detail information about this\nproject, only export is available, ",(0,r.kt)("inlineCode",{parentName:"li"},"USERS")," tab will list all the project users, you can click the ",(0,r.kt)("inlineCode",{parentName:"li"},"Export")," button to export all\nthe project users to a csv file, or click ",(0,r.kt)("inlineCode",{parentName:"li"},"Import")," button to import users into the selected project with a prepare CSV file of User information.")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Please note that you can only import the certain type of data based on the active Tab, here\nare the details:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PROJECTS")," Tab: You can only import project list into the selected account, the csv file needs to follow\nthe Projects template, the csv file of Users template can not be imported. You can check the console to see\nif any projects failed."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"PROJECT")," Tab: Nothing can be imported when this tab is active."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"USERS")," Tab: You can only import user list into the selected project, the csv file needs to follow the Users\ntemplate, Projects template can not be imported. Due to the limitation of Import Project Users API, No information to\ntell if any users are failed to be imported."))),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Final App",src:n(2166).Z,width:"1926",height:"1054"})))}p.isMDXComponent=!0},2166:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/acc-administrator-final-app-a037032ceb35d380fcb0b6d845130dda.webp"}}]);